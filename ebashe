#!/bin/bash
printf '\e[?7l'

shopt -s lastpipe # For syntax
shopt -s extglob # Ensure advanced pattern matching is available
shopt -s checkwinsize; (:) # Enable and then trigger a terminal size refresh
trap redraw WINCH ALRM # Attach WINCH and ALRM to redraw the screen
trap die EXIT HUP USR1 # Attach most exit codes to cleanup and exit
trap quit INT
trap quit SIGTERM

declare -A syntax menuline menufile menuhelp menukey style about winhelp windowkey editkey wininfo stroke
declare -a buffer buffersyntax hexkey
declare -i line base rl
declare -n menucon window
declare file message modified filetype enable_mouse comment stringone stringtwo reservedlines

printf "\e[?1049h" #switch to alternative buffer

buffer=() # File contents
buffersyntax=() # File contents
line=0 # Currently selected line (0 means the buffer is empty)
base=1 # Top-most line shown
rl=0 # how left or right the cursor is
file= # Currently addressed file
message="ebashe version insanity" # Feedback text in the status bar
modified=false # Tracking whether a file was modified
enable_mouse=true # Xterm mouse support
reservedlines=2 # Number of lines not displaying file

editkey[up]=$'\E[A'
editkey[down]=$'\E[B'
editkey[right]=$'\E[C'
editkey[left]=$'\E[D'
editkey[pgup]=$'\E[5~'
editkey[pgdown]=$'\E[5~'

stroke[18 0]='quit'
stroke[7 0]='menuhelp'
stroke[10 0]='up'
stroke[e 0]='down'
stroke[6 0]='right'
stroke[2 0]='left'
stroke[19 0]='page_down'
stroke[16 0]='page_up'
stroke[0]='new_line'
stroke[c 0]='new_line'
stroke[f 0]='write_buffer'
stroke[12 0]='read_buffer'
stroke[1b 72 0]='set_buffer_file'
stroke[14 0]='execute'
stroke[4 0]='delete_line'
stroke[13 0]='shell'
stroke[5 0]='mtoggle'
stroke[7f 0]='backspace'
#	case "${hexkey[@]}" in
#		${BANO_KEY_EXIT:='18 0'}) quit; return;;
#		${BANO_KEY_PREVIOUS:=10}) up; redraw; return;;
#		${BANO_KEY_NEXT:=e}) down; redraw; return;;
#		${BANO_KEY_FORTH:=6}) right; redraw; return;;
#		${BANO_KEY_BACK:=2}) left; redraw; return;;
#		${BANO_KEY_PGPREVIOUS:=19}) page_down; redraw; return;;
#		${BANO_KEY_PGNEXT:=16}) page_up; redraw; return;;
#		${BANO_KEY_NEWLINE:=0}) new_line; return;;
#		${BANO_KEY_NEWLINEALT:=c}) new_line; return;;
#		${BANO_KEY_HELP:=7}) menuhelp; return;;
#		${BANO_KEY_SAVE:=f}) write_buffer; return;;
#		${BANO_KEY_READ:=12}) read_buffer; return;;
#		${BANO_KEY_READ:=1b}) set_buffer_file; return;;
#		${BANO_KEY_EXECUTE:=14}) execute; return;;
#		${BANO_KEY_DELETE:=4}) delete_line; redraw; return;;
#		${BANO_KEY_SHELL:=13}) shell; return;;
#		${BANO_KEY_MOUSE_TOGGLE:=5}) mtoggle; return;;
#		${BANO_KEY_SCROLL:=1b}) mouse=true;;
#		${BANO_KEY_BACKSPACE:=7f}) backspace; return;; #delete last char when backspace is pressed
#	esac

style[TODO]='\e[0;45m'
style[NOTE]='\e[0;47m'
style[menuline]='\e[107;30m'
style[windowline]='\e[107;30m'
style[menuitem]='\e[107;30m'
style[windowcontent]='\e[30;47m'
style[menuitemselected]='\e[30;47m'
style[infoline]='\e[107;30m'
style[number]='\e[0;90m'
style[numberselected]='\e[0;97m'

windowkey[up]=$'\E[A'
windowkey[down]=$'\E[B'
windowkey[right]=$'\E[C'
windowkey[left]=$'\E[D'
windowkey[hsizep]='*'
windowkey[hsizem]='/'
windowkey[vsizep]='+'
windowkey[vsizem]='-'

menuline[File]=menufile
menuline[Help]=menuhelp
menuline[Keybindings]=menukey
menuline[Redraw]=refresh

menufile[Close   C-x ]="quit"
menufile[Open    M-r ]="set_buffer_file"
menufile[Execute C-t ]="execute"
menufile[Save    C-o ]="write_buffer"
menufile[Info        ]="wininfo"

menuhelp[Keybinding          ]=menukey
menuhelp[About float windows ]=winhelpf
menuhelp[About               ]=about

menukey[Exit         C-x ]="quit"
menukey[New Line C-l | ‚èé ]="new_line"
menukey[Set target   M-r ]="set_buffer_file"
menukey[Read File    C-r ]="read_buffer"
menukey[Write Out    C-o ]="write_buffer"
menukey[Delete Line  C-d ]="delete_line"
menukey[Toggle Mouse C-e ]="mtoggle"
menukey[Prev Line    C-p ]="up"
menukey[Next Line    C-n ]="down"
menukey[Prev Page    C-y ]="page_up"
menukey[Next Page    C-v ]="page_down"
menukey[Execute      C-t ]="execute"
menukey[Shell        C-s ]="shell"


menufile() {
	unset menucon
	declare -n menucon=menufile
	menu
}
menuhelp() {
	unset menucon
	declare -n menucon=menuhelp
	menu
}
menukey() {
	unset menucon
	declare -n menucon=menukey
	menu
}

syntax[bash]=builtin_syntax_bash
syntax[sh]=builtin_syntax_bash #there isnt anything really bash specific currently
syntax[ksh]=builtin_syntax_bash
syntax[mksh]=builtin_syntax_bash
syntax[dash]=builtin_syntax_bash
syntax[zsh]=builtin_syntax_bash
syntax[conf]=builtin_syntax_conf
syntax[unknown]=builtin_syntax_unknown

about[sizex]="60"
about[sizey]="20"
about[title]=" About Ebashe "
about[content]="Ebashe is text editor made in bash trying to copy Emacs. It is based on Bed editor"

winhelp[sizex]="60"
winhelp[sizey]="20"
winhelp[title]=" Floating window help "
winhelp[content]="Use arrow keys to move the window and / to decrease its width, * to increase, + to increase its height and - to decrease"

wininfo[sizex]="60"
wininfo[sizey]="20"
wininfo[title]=" File info "
#content is set in fucntion, so it can dynamicaly update

about() {
	unset window
	declare -n window=about
	makefloatwin
}
winhelpf() {
	unset window
	declare -n window=winhelp
	makefloatwin
}
wininfo() {
	unset window
	declare -n window=wininfo
	wininfo[content]="type: $filetype"
	makefloatwin
}

#internal

refresh() {
	megaredraw
	redraw
}
makefloatwin() {
	floatsizex="${window[sizex]}"
	floatsizey="${window[sizey]}"
	floatpositionx=$(( ( COLUMNS / 2 ) - ( floatsizex / 2 )  ))
	floatpositiony=$(( ( LINES / 2 ) - ( floatsizey / 2 ) ))
	floatwin
}
floatwin() {
	printf '\e[?25l'
	printf '\e[%s;%sH' $floatpositiony $floatpositionx
	printf "${style[windowline]}%*s\r" $floatsizex
	printf '\e[%s;%sH' $floatpositiony $floatpositionx
	printf '%s\e[m' "${window[title]}"
	local -i rsizey=$(( floatsizey - 1 ))
	local -i csizex=0
	for ((i=1;i<=rsizey;i++)); do
		printf "\e[%s;%sH${style[windowcontent]}%*s\r" $(( floatpositiony + i )) $floatpositionx "$floatsizex"
		printf '\e[%s;%sH%s\n' $(( floatpositiony + i )) $floatpositionx "${window[content]:csizex:floatsizex}"
		csizex=$(( csizex + floatsizex ))
	done
	printf '\e[m'
	local -a kbd=()
    if read -rsN1 kbd[0]; then # Check for ready input
		while read -rsN1 -t0.0001 kbd[$i]; do ((i++)); done # Multibyte hack
		case "$(printf '%s' "${kbd[@]}")" in
			"${windowkey[up]}"*) (redraw); ((floatpositiony--)); floatwin ;;
			"${windowkey[down]}"*) (redraw); ((floatpositiony++)); floatwin ;;
			"${windowkey[right]}"*) (redraw); ((floatpositionx++)); floatwin ;;
			"${windowkey[left]}"*) (redraw); ((floatpositionx--)); floatwin ;;
			
			"${windowkey[vsizem]}") (redraw); ((floatsizey--)); floatwin ;;
		    "${windowkey[vsizep]}") (redraw); ((floatsizey++)); floatwin ;;
		    "${windowkey[hsizem]}") (redraw); ((floatsizex--)); floatwin ;;
			"${windowkey[hsizep]}") (redraw); ((floatsizex++)); floatwin ;;
			*) redraw; printf '\e[?25h'; return ;;
		esac
	fi
}

builtin_syntax_bash() {
	case "${word:0:2}" in
		'"$') colour 0 36 48 "${word}"; return ;;
	esac
	case "${word:0:1}" in
		'#') colour 0 37 48 "${word}" && comment=true; return;;
		'$') colour 0 96 108 "${word}"; return ;;
		'-') colour 0 93 108 "${word}"; return ;;
	esac
	"${comment}" && colour 0 37 48 "${word}" && return
	case "${word}" in
		'||') colour 0 95 108 "${word}"; return ;;
		'&&') colour 0 95 108 "${word}"; return ;;
		']') colour 1 95 108 "${word}"; return ;;
		'[') colour 1 95 108 "${word}"; return ;;
		'[[') colour 1 95 108 "${word}"; return ;;
		']]') colour 1 95 108 "${word}"; return ;;
		')') colour 1 95 108 "${word}"; return ;;
		'(') colour 1 95 108 "${word}"; return ;;
		'{') colour 1 95 108 "${word}"; return ;;
		'}') colour 1 95 108 "${word}"; return ;;
		';') colour 0 95 108 "${word}"; return ;;
		*"'"*) colour 0 92 108 "${word}" && return ;;
		*'"'*) colour 0 32 48 "${word}" && return ;;
		*'='*) colour 0 94 108 "${word}"; return ;;
	esac
		   
	[[ "${word: -2}" = '()' ]] && colour 0 30 44 "${word}" && return
	case "${word}" in
		'echo'|'return'|'case'|'esac'|'for'|'while'|'do'|'done'|'if'|'elif'|'else'|'printf'|'fi'|'continue'|'exit'|'bind'|'then'|'break'|'read'|'declare'|'typeset'|'local'|'let'|'shopt'|'trap'|'set') colour 0 91 108 "${word}" && return
	esac
	colour 0 0 0 "${word}"
}
builtin_syntax_unknown() {
	colour 0 0 0 "${word}"
}
builtin_syntax_conf(){
	[[ "${word}" =~ "#" ]] && colour 38 5 4 "${word}" && comment=true && return
	"${comment}" && colour 38 5 4 "${word}" && return
	colour 0 0 0 "${word}"
}

syntax() {
	for s in "${!syntax[@]}"; {
		[ "$s" = "$filetype" ] && "${syntax[$s]}" && return
	}
	"${syntax[unknown]}"
}
colour(){
	printf "\033[%s;%s;%sm%s\033[0;0m" "$1" "$2" "$3" "$4"
}
basenam() {
	for file in "$@"; do
	    file="${file%/}"
	    printf '%s\n' "${file##*/}"
	done
}
filetype(){
	[ $# = 0 ] && return
	IFS='.'
	filename="${1%/}"
	filename="${filename##*/}"
	filenamesplit=($filename)
	extension="${filenamesplit[-1]}"
	[ "${#filenamesplit[@]}" -gt 1 ] && echo "$extension" && return
	mapfile -n 1 file_data < "$1"
	shebang="$(echo -n "${file_data[@]}")"
	[ ! "${shebang:0:1}" = '#' ] && echo unknown && return
	shebang="${shebang%/}"
	IFS=' '
	shebang="${shebang##*/}"
	shebangsplit=($shebang)
	printf '%s\n' "${shebangsplit[-1]}"	
}
set_buffer_file() {
	printf '\e[%s;0H' "${LINES}"
	printf '\e[D\033[1;93;108m' #make prompt nicer
    bind 'set disable-completion off' 2>/dev/null # Enable completion
    printf '\e[?25h' # Enable cursor
    if read -rei "$1$file" -p "${BED_FILE_PROMPT:=Path: }" file; then
        modified=true
    fi
    bind 'set disable-completion on' 2>/dev/null
}

read_buffer() {
	filetype="$(filetype "$1")"
    set_buffer_file "$1" # Update target file (pass on default if present)
    mapfile -t -O 1 buffer <"$file" # Read file into an array
    pipesyntax < "$file" | mapfile -t -O 1 buffersyntax  # Read file into an array
    if [[ "${buffer[1]}" ]]; then # Ensure that something was actually read into the file
        line=1 # Indicate that we have a buffer loaded
        modified=false
        message="${file}: ${#buffer[@]}"
    else
        message="{$file}: empty"
    fi
}

write_buffer() {
    true >"$file" # Set the file to an empty text file
    for ln in "${buffer[@]}"; do # Write in the buffer to the file
        echo "$ln" >>"$file"
    done
    modified=false
    message="Wrote ${#buffer[@]} lines to '$file'"
}
megaredraw(){
	printf '%s\n' "${buffer[@]}" | pipesyntax | mapfile -t -O 1 buffersyntax
}
megaredrawline(){
	buffersyntax[line]="$(printf '%s' "${buffer[line]}" | pipesyntax)"
}
tabrender(){
	IFSbck="$IFS"
	IFS=
	while read -rsn1 char
	do
		[ "$char" = " " ] && printf ' ' && continue
		[ "$char" = "	" ] && printf '\033[0;37;48m%s\033[0;0m' "${BANO_RENDER_TAB:=.}" && continue
		printf '%s' "$char"
	done
	IFS="$IFSbck"
}
tabrenderraw(){
	IFSbck="$IFS"
	IFS=
	while read -rsn1 char
	do
		[ "$char" = " " ] && printf ' ' && continue
		[ "$char" = "	" ] && printf '%s' "${BANO_RENDER_TAB_ALT:= }" && continue
		printf '%s' "$char"
	done
	IFS="$IFSbck"
}
new_line() {
    buffer=("" "${buffer[@]:1:line}" "" "${buffer[@]:line+1}")
    unset 'buffer[0]'
    modified=true
	megaredraw
	down
	redraw
}

delete_line() {
    buffer=("" "${buffer[@]:1:line-1}" "${buffer[@]:line+1}")
    unset 'buffer[0]'
    ((line > ${#buffer[@]})) && up
    modified=true
    megaredraw
	redraw
}

quit() {
	printf '\e[%s;0H' "${LINES}"
	printf '\e[D\033[1;93;108m' #make prompt nicer
    if [[ "$modified" == "true" ]]; then
        while :; do
            read -rsN1 -p "Buffer modified, save before close? [Y/n/c]" choice
            case "$choice" in
            Y|y) write_buffer; die;;
            N|n) die;;
            C|c) message="Quit canceled"; break;;
            *) continue;;
            esac
        done
    else
        die
    fi
}

up() {
    for ((i = 0; i < ${1:-1}; i++)); do
        ((line > 1)) && ((line--)) # As long as we can keep going up, go up
        ((line < base)) && ((base--)) # Push back the top if we need to
        ((base <= 0)) && base=1 # Don't push back if our base is at 1
        [ -z "$bckrl" ] && bckrl="${rl}"
        (( "${#buffer[line]}" < "${rl}" )) && rl="${#buffer[line]}"
        (( "${#buffer[line]}" > "${rl}" )) && rl=bckrl
    done
	redraw
}

page_up() {
    up $((LINES - 3))
}

down() {
    for ((i = 0; i < ${1:-1}; i++)); do
        ((line < ${#buffer[@]})) && ((line++)) # If we can go down, go down
        ((line > base + LINES - 3)) && ((base++)) # Move window down if needed
        [ -z "$bckrl" ] && bckrl="${rl}"
        (( "${#buffer[line]}" < "${rl}" )) && rl="${#buffer[line]}"
        (( "${#buffer[line]}" > "${rl}" )) && rl=bckrl
    done
	redraw
}

page_down() {
    down $((LINES - 3))
}

execute() {
    ((line == 0)) && return # If the line is not possible, do nothing
    printf '\e[?25h\e[%sH' "$((line + 2 - base))" # Reset cursor position and enable cursor
    read -re -p "$(printf '%4s ' "$")" # Present editable line
    if [[ "$REPLY" != "${buffer[line]}" ]]; then # If the line is changed, update and inform
        buffer[line]="$($REPLY)"
        modified=true
    fi
    megaredraw
    redraw
}
right() {
	case "${buffer[line]}" in
		*)((rl++));;
	esac
	[ "$rl" -gt "${#buffer[line]}" ] && { rl=0; down; }
	bckrl=
	redraw
}
left() {
	((rl--))
	[ "$rl" -lt 0 ] && { up; rl="${#buffer[line]}"; }
	bckrl=
	redraw
}
shell() {
	printf "\033c"
	bash
	redraw
}

die() {
    bind 'set disable-completion off' 2>/dev/null # Enable completion
    printf '\e[?25h\e[?7h\e[?1047l' # Reset terminal to sane mode
    printf "\e[?1049l" # switch back to main buffer
    echo -e "\e[?1000;1006;1015l" #disable mouse tracking
    exit "${errno:-0}" # Assume that we are exiting without an error
}
mtoggle() {
	[ "$enable_mouse" = true ] && echo -ne "\e[?1000;1006;1015l" && enable_mouse=false && return
	[ "$enable_mouse" = false ] && echo -ne "\e[?1000;1006;1015h" && enable_mouse=true && return
}
menuclick() {
	#determine which item should be triggered
	local p=$1
	local cx=0
	for a in "${!menuline[@]}"; {
		la="${#a}"
		((p>cx)) && ((p<(cx + la + 1))) && ${menuline[$a]}
		cx=$(( cx + la + 1 ))
	}
}
menu() {
	local -i dc=0
	printf '\e[?25l'
	while true; do
		local -a k=()
		local -i i=1
		printf '\e[0;0H'
		local mi=0
		for action in "${!menucon[@]}"; do
			if [ $mi = $dc ]; then
				printf "${style[menuitemselected]}%s\e[0;0m\n" "$action"  
			else
				printf "${style[menuitem]}%s\e[0;0m\n" "$action"
			fi
			((mi++))
		done
		local -a kb=()
        if read -rsN1 -t"${BED_REFRESH_TIMEOUT:=0.01}" kb[0]; then # Check for ready input
			while read -rsN1 -t0.0001 kb[$i]; do ((i++)); done # Multibyte hack
			case "$(printf '%s' "${kb[@]}")" in
				${editkey[up]}*) ((dc--)) ;;
				${editkey[down]}*) ((dc++)) ;;
				'')
					mi=0
					for action in "${!menucon[@]}"; do
						[ $mi = $dc ] && ${menucon[$action]}
						printf '%s\n' $mi $dc
						((mi++))
					done
					return
					redraw
					;;
				*) redraw; return ;;
			esac
			(( "$dc" > ( "${#menucon[@]}" - 1))) && ((dc--))
			(( "$dc" < 0 )) && ((dc++))
		fi
	done
}
redraw() {
	printf "\e[0m\e[H${style[menuline]}\e[?25l%*s\r" "$COLUMNS" 
	printf '%s ' "${!menuline[@]}"
	printf '\e[0m'
    for ((i = base; i - base < LINES - reservedlines; i++)); do # Iterate over shown lines
        ((i != line)) && printf "${style[number]}" # Fade line number if not selected
        ((i > ${#buffer[@]})) && printf "\n${style[number]}\e[K   ~\e[m" || \
            case "${buffer[i]}" in
                *"TODO: "*|*TODO:) printf "\n\e[K%4s\e[m ${style[TODO]}%s\033[0;0m" "$i" "$(printf '%s' "${buffer[i]}" | tabrenderraw)";;
                *"NOTE: "*|*NOTE:) printf "\n\e[K%4s\e[m ${style[NOTE]}%s\033[0;0m" "$i" "$(printf '%s' "${buffer[i]}" | tabrenderraw)";;
				*) printf "\n\e[K%4s\e[m %s" "$i" "${buffersyntax[i]}";;
            esac
            #TODO: make proper coloring based on variable for future config
	done
	(printf "\n\e[?25l${style[infoline]}%*s\r %s (%s,%s)\e[m" \
			"$COLUMNS" "$message" \
			"$(basenam "$file") ($filetype)" "$line" "${rl}") # Status line, among others
    printf '\e[?25h\e[%s;%sH' $((line + 2 - base)) $(( rl + 6 )) # move cursor to the line
}
backspace() {
	while [ "${#buffer[line]}" = 0 ]; do
		delete_line
	done
	buffer[line]="${buffer[line]:0:$(( rl - 1 ))}${buffer[line]:${rl}}" #add the key at $rl (cursor position)
	left #go left with cursor
	megaredrawline #not sure why this is needed but it prevents duplication of the letter
	redraw #draw it
	modified=true
}
keytype() {
	hexkey=()
	case "$1" in
		${editkey[pgup]}) page_up; return;;
		${editkey[pgup]}) page_down; return;;
		${editkey[up]}*) up; return;;
		${editkey[down]}*) down; return;;
		${editkey[right]}*) right; return;;
		${editkey[left]}*) left; return;;
	esac
	
	i=0
	echo "$1" | while read -rn1; do
		hexkey[i]="$(printf "%x\n" "'${1:$i}")"
		((i++))
	done
#	clear        #stuff for debugging
#	echo "${hexkey[@]}" #stuff for debugging
#	read -rsn1         #stuff for debugging
	
	for str in "${!stroke[@]}"; do
		[ "$str" = "${hexkey[*]}" ] && "${stroke[$str]}" && return
	done
	#TODO: make mouse scrolling nice instead of ignoring it

	#parse mouse stuff somewhatish weirdly
	[ "${hexkey[0]}" = '1b' ] && {
		a="$1"
		[ "${a: -1}" = 'm' ] && {
			value=0
			echo "$a" | while read -rsn1 mchar; do
				case "$mchar" in
					'0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|9)tmp="${tmp}${mchar}";;
					'm'|'M'|';') {
						[ "$value" = '0' ] && mode="${tmp}" && tmp=
						[ "$value" = '1' ] && x="${tmp}" && tmp=
						[ "$value" = '2' ] && y="${tmp}" && tmp=
					};;
				esac
				case "$mchar" in
					';')((value++));;
					'm'|'M')value=0 && break;;
				esac
			done
		}
		#limitations of movenment
		[ $y = 1 ] && menuclick $x && return #handle menuline
		[ $x -lt 6 ] && return
		line=$(( base + ( y - 2 ) ))
		rl=$(( x - 6 ))
		((line > ${#buffer[@]})) && line=${#buffer[@]}
		((rl > ${#buffer[line]})) && rl=${#buffer[line]}
		redraw
		return
	}
	
	buffer[line]="${buffer[line]:0:${rl}}$1${buffer[line]:${rl}}" #add the key at $rl (cursor position)
	#go right with cursor
	megaredrawline #not sure why this is needed but it prevents duplication of the letter
	right
	modified=true
}
main() {
    printf '\e[?1047h' # Switch to alternative buffer
    echo -ne "\e[?1000;1006;1015h" #enable mouse tracking
    if [[ "$1" ]]; then # If a file was provided in the terminal pre-load it
        redraw # Draw out the UI before loading file
        read_buffer "$1"
    fi
    redraw
    while true; do
        local -a k=()
        local -i i=1
        
        if read -rsN1 -t"${BED_REFRESH_TIMEOUT:=1}" k[0]; then # Check for ready input
           while read -rsN1 -t0.0001 k[$i]; do ((i++)); done # Multibyte hack
            keytype "$(printf '%s' "${k[@]}")" # Handle keypress event
        fi
    done
}
pipesyntax() {
	comment=false
	stringone=false
	stringtwo=false
	word=
	bckIFS="${IFS}"
	IFS=
	readstuff() {
		while read -rsn1 char
		do
			[ "$char" = " " ] && syntax && word='' && printf ' ' && continue
			[ "$char" = "	" ] && syntax && word='' && printf '\033[0;37;48m%s\033[0;0m' "${BANO_RENDER_TAB:=.}" && continue
			[ -z "$char" ] && syntax && word='' comment='false' && echo && continue
			word="${word}${char}" && printf '%s\e[%sD' "$word" "${#word}"
		done
	}
	readstuff
	IFS="${bckIFS}"
}
main "$@"
printf '\e[?7h'
